const SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

const RSBOX: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
];

const RCON: [u32; 11] = [
    0, 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000,
    0x80000000, 0x1b000000, 0x36000000,
];

fn sub_byte(x: u8) -> u8 {
    let idx: usize = ((x.wrapping_shr(4)) * 0x10 + (x & 0xf)).into();
    SBOX[idx]
}

fn inv_sub_byte(x: u8) -> u8 {
    let idx: usize = ((x.wrapping_shr(4)) * 0x10 + (x & 0xf)).into();
    RSBOX[idx]
}

fn sub_bytes(s: &mut [[u8; 4]; 4]) {
    for a in s.iter_mut() {
        for b in a.iter_mut() {
            *b = sub_byte(*b);
        }
    }
}

fn inv_sub_bytes(s: &mut [[u8; 4]; 4]) {
    for a in s.iter_mut() {
        for b in a.iter_mut() {
            *b = inv_sub_byte(*b);
        }
    }
}

fn shift_rows(s: &mut [[u8; 4]; 4]) {
    (s[1][0], s[1][1], s[1][2], s[1][3]) = (s[1][1], s[1][2], s[1][3], s[1][0]);
    (s[2][0], s[2][1], s[2][2], s[2][3]) = (s[2][2], s[2][3], s[2][0], s[2][1]);
    (s[3][0], s[3][1], s[3][2], s[3][3]) = (s[3][3], s[3][0], s[3][1], s[3][2])
}

fn inv_shift_rows(s: &mut [[u8; 4]; 4]) {
    (s[1][0], s[1][1], s[1][2], s[1][3]) = (s[1][3], s[1][0], s[1][1], s[1][2]);
    (s[2][0], s[2][1], s[2][2], s[2][3]) = (s[2][2], s[2][3], s[2][0], s[2][1]);
    (s[3][0], s[3][1], s[3][2], s[3][3]) = (s[3][1], s[3][2], s[3][3], s[3][0]);
}

fn xtime(x: u8) -> u8 {
    return (x << 1) ^ (((x >> 7) & 1) * 0x1b);
}

fn mul(mut x: u8, mut y: u8) -> u8 {
    let mut res = 0;
    while y != 0 {
        if y & 1 == 1 {
            res ^= x;
        }
        x = xtime(x);
        y >>= 1;
    }
    return res;
}

fn sub_word(x: u32) -> u32 {
    let mut bytes = x.to_be_bytes();
    for byte in bytes.iter_mut() {
        *byte = sub_byte(*byte)
    }
    let res = u32::from_be_bytes(bytes);
    res
}

fn rot_word(x: u32) -> u32 {
    x.wrapping_shl(8) + x.wrapping_shr(24)
}

fn mix_columns(s: &mut [[u8; 4]; 4]) {
    let mul_vec = |a: [u8; 4], s: [u8; 4]| -> u8 {
        let mut res = 0;
        for i in 0..4 {
            res ^= mul(a[i], s[i]);
        }
        res
    };
    for j in 0..4 {
        let r = [s[0][j], s[1][j], s[2][j], s[3][j]];
        s[0][j] = mul_vec([2, 3, 1, 1], r);
        s[1][j] = mul_vec([1, 2, 3, 1], r);
        s[2][j] = mul_vec([1, 1, 2, 3], r);
        s[3][j] = mul_vec([3, 1, 1, 2], r);
    }
}

fn inv_mix_columns(s: &mut [[u8; 4]; 4]) {
    let mul_vec = |a: [u8; 4], s: [u8; 4]| -> u8 {
        let mut res = 0;
        for i in 0..4 {
            res ^= mul(a[i], s[i]);
        }
        res
    };
    for j in 0..4 {
        let r = [s[0][j], s[1][j], s[2][j], s[3][j]];
        s[0][j] = mul_vec([0x0e, 0x0b, 0x0d, 0x09], r);
        s[1][j] = mul_vec([0x09, 0x0e, 0x0b, 0x0d], r);
        s[2][j] = mul_vec([0x0d, 0x09, 0x0e, 0x0b], r);
        s[3][j] = mul_vec([0x0b, 0x0d, 0x09, 0x0e], r);
    }
}

fn add_round_key(s: &mut [[u8; 4]; 4], w: &[u32]) {
    let w: [u32; 4] = w.try_into().unwrap();
    for j in 0..4 {
        for i in 0..4 {
            s[i][j] ^= w[j].to_be_bytes()[i];
        }
    }
}
struct AESContext {
    Nk: usize,
    Nb: usize,
    Nr: usize,
}

impl AESContext {
    pub fn get_128() -> Self {
        AESContext {
            Nk: 4,
            Nb: 4,
            Nr: 10,
        }
    }
    pub fn get_192() -> Self {
        AESContext {
            Nk: 6,
            Nb: 4,
            Nr: 12,
        }
    }
    pub fn get_256() -> Self {
        AESContext {
            Nk: 8,
            Nb: 4,
            Nr: 14,
        }
    }
    fn key_expansion(&self, key: &[u8]) -> Vec<u32> {
        let mut w = vec![0; self.Nb * (self.Nr + 1)];

        for i in 0..self.Nk {
            w[i] = u32::from_be_bytes([key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]])
        }

        for i in self.Nk..self.Nb * (self.Nr + 1) {
            let mut tmp = w[i - 1];
            if i % self.Nk == 0 {
                tmp = sub_word(rot_word(tmp)) ^ RCON[i / self.Nk];
            } else if self.Nk > 6 && i % self.Nk == 4 {
                tmp = sub_word(tmp);
            }
            w[i] = w[i - self.Nk] ^ tmp;
        }
        w
    }
    pub fn encrypt(&self, input: [u8; 16], key: &[u8]) -> [u8; 16] {
        let w = self.key_expansion(key);
        let mut state = [[0; 4]; 4];
        for j in 0..4 {
            for i in 0..4 {
                state[i][j] = input[i + j * 4];
            }
        }

        add_round_key(&mut state, &w[0..self.Nb]);

        for round in 1..self.Nr {
            sub_bytes(&mut state);
            shift_rows(&mut state);
            mix_columns(&mut state);
            add_round_key(&mut state, &w[round * self.Nb..(round + 1) * self.Nb]);
        }

        sub_bytes(&mut state);
        shift_rows(&mut state);
        add_round_key(&mut state, &w[self.Nr * self.Nb..(self.Nr + 1) * self.Nb]);

        let mut output = [0; 16];
        for j in 0..4 {
            for i in 0..4 {
                output[j * 4 + i] = state[i][j];
            }
        }
        output
    }
    pub fn decrypt(&self, input: [u8; 16], key: &[u8]) -> [u8; 16] {
        let w = self.key_expansion(key);
        let mut state = [[0; 4]; 4];
        for j in 0..4 {
            for i in 0..4 {
                state[i][j] = input[i + j * 4];
            }
        }

        add_round_key(&mut state, &w[self.Nr * self.Nb..(self.Nr + 1) * self.Nb]);

        for round in (1..self.Nr).rev() {
            inv_shift_rows(&mut state);
            inv_sub_bytes(&mut state);
            add_round_key(&mut state, &w[round * self.Nb..(round + 1) * self.Nb]);
            inv_mix_columns(&mut state);
        }

        inv_shift_rows(&mut state);
        inv_sub_bytes(&mut state);
        add_round_key(&mut state, &w[0..self.Nb]);

        let mut output = [0; 16];
        for j in 0..4 {
            for i in 0..4 {
                output[j * 4 + i] = state[i][j];
            }
        }
        output
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_aes_128() {
        let plaintext = [
            0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd,
            0xee, 0xff,
        ];
        let key = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
            0x0e, 0x0f,
        ];
        let ciphertext = [
            0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4,
            0xc5, 0x5a,
        ];
        let ctx = AESContext::get_128();
        let encrypted = ctx.encrypt(plaintext, &key);
        assert_eq!(ciphertext, encrypted);
        let decrypted = ctx.decrypt(encrypted, &key);
        assert_eq!(plaintext, decrypted);
    }

    #[test]
    fn test_aes_256() {
        let plaintext = [
            0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd,
            0xee, 0xff,
        ];
        let key = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
            0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
            0x1c, 0x1d, 0x1e, 0x1f,
        ];
        let ciphertext = [
            0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49,
            0x60, 0x89,
        ];
        let ctx = AESContext::get_256();
        let encrypted = ctx.encrypt(plaintext, &key);
        assert_eq!(ciphertext, encrypted);
        let decrypted = ctx.decrypt(encrypted, &key);
        assert_eq!(plaintext, decrypted);
    }

    #[test]
    fn test_aes_192() {
        let plaintext = [
            0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd,
            0xee, 0xff,
        ];
        let key = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
            0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        ];
        let ciphertext = [
            0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d,
            0x71, 0x91,
        ];
        let ctx = AESContext::get_192();
        let encrypted = ctx.encrypt(plaintext, &key);
        assert_eq!(ciphertext, encrypted);
        let decrypted = ctx.decrypt(encrypted, &key);
        assert_eq!(plaintext, decrypted);
    }

    #[test]
    fn test_aes_128_round_1() {
        let mut state = [
            [0x19, 0xa0, 0x9a, 0xe9],
            [0x3d, 0xf4, 0xc6, 0xf8],
            [0xe3, 0xe2, 0x8d, 0x48],
            [0xbe, 0x2b, 0x2a, 0x08],
        ];
        let key = [
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
            0x4f, 0x3c,
        ];
        let ctx = AESContext::get_128();
        let w = ctx.key_expansion(&key);

        let after_sub_bytes = [
            [0xd4, 0xe0, 0xb8, 0x1e],
            [0x27, 0xbf, 0xb4, 0x41],
            [0x11, 0x98, 0x5d, 0x52],
            [0xae, 0xf1, 0xe5, 0x30],
        ];

        sub_bytes(&mut state);
        assert_eq!(after_sub_bytes, state);

        let after_shift_rows = [
            [0xd4, 0xe0, 0xb8, 0x1e],
            [0xbf, 0xb4, 0x41, 0x27],
            [0x5d, 0x52, 0x11, 0x98],
            [0x30, 0xae, 0xf1, 0xe5],
        ];

        shift_rows(&mut state);
        assert_eq!(after_shift_rows, state);

        let aftet_mix_columns = [
            [0x04, 0xe0, 0x48, 0x28],
            [0x66, 0xcb, 0xf8, 0x06],
            [0x81, 0x19, 0xd3, 0x26],
            [0xe5, 0x9a, 0x7a, 0x4c],
        ];
        mix_columns(&mut state);
        assert_eq!(aftet_mix_columns, state);

        let after_add_round_key = [
            [0xa4, 0x68, 0x6b, 0x02],
            [0x9c, 0x9f, 0x5b, 0x6a],
            [0x7f, 0x35, 0xea, 0x50],
            [0xf2, 0x2b, 0x43, 0x49],
        ];
        let round = 1;
        add_round_key(&mut state, &w[round * ctx.Nb..(round + 1) * ctx.Nb]);
        assert_eq!(after_add_round_key, state);
    }

    #[test]
    fn test_key_expansion() {
        let key = [
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
            0x4f, 0x3c,
        ];
        let ctx = AESContext::get_128();
        let w = ctx.key_expansion(&key);
        assert_eq!(44, w.len());
        assert_eq!(0x2b7e1516, w[0]);
        assert_eq!(0x28aed2a6, w[1]);
        assert_eq!(0xabf71588, w[2]);
        assert_eq!(0x09cf4f3c, w[3]);
        assert_eq!(0xa0fafe17, w[4]);
    }

    #[test]
    fn test_sub_bytes() {
        assert_eq!(0xed, sub_byte(0x53));
        assert_eq!(0x71, sub_byte(0x2c));
    }

    #[test]
    fn test_sub_word() {
        assert_eq!(0x717f2100, sub_word(0x2c6b7b52));
    }

    #[test]
    fn test_shift_rows() {
        let mut o = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]];
        let want = [[0, 1, 2, 3], [5, 6, 7, 4], [10, 11, 8, 9], [15, 12, 13, 14]];
        shift_rows(&mut o);
        assert_eq!(want, o);
    }

    #[test]
    fn test_mul() {
        assert_eq!(0xfe, mul(0x57, 0x13));
        assert_eq!(0xfe, mul(0xfe, 0x01));
    }

    #[test]
    fn test_rot_word() {
        assert_eq!(0x34567812, rot_word(0x12345678));
        assert_eq!(0x2c6b7b52, rot_word(0x522c6b7b));
    }
}
